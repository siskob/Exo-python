# from pathlib import Path
# path = Path("/Users/tbibh/main.py")
# path.parent pour récupérer le dossier parent /Users/tbibh
# path.suffix (pour .py)
#Path.home() : dossier utilisateur
#Path.cwd(): dossier de travail actuel
#Concactenation en dessous:
#p=Path.home(), p / "Document" /"main.py" ou p.joinpath("Documents", "main.py")
#(p / "Document" /"main.py").suffix
#Les principale infos qu'on peut recuperer sur un objet de type path :
#p= Path("/Users/tbibh/Documents/index.html")
#print(p.name) : index.html
#print(p.parent) : le parent
#print(p.stem) : index
#print(p.suffix) : html
#print(p.suffixes) : toutes les extensions sous forme de liste
#print(p.parts) : Toutes les parties
#print(p.exists()) : si le fichier existe
#print(p.is_dir()), print(p.is_file())  : s'il s'agit d'un dossier ou d'un fichier
#print(dir(p)) : Tout ce qui est dispo sur l'objet p
#p= p / "Dossiertest", p.mkdir(exist_ok = True) : création de Dosiertest
#p.mkdir(parents = True) : plusieurs dossiers les uns dans les autres, même s'ils n'existaient pas.
#p.touch(), p.unlink() : creer et supprimer un fichier
#p.rmdir() : suppression dossier vide
#import shutil, shutil.rmtree(p)
#p.write_text("Bonjour"), p.read_text() : Ecrire et lire dans le fichier.
#[f for f in Path.home().iterdir() if f.is_dir()] : afficher les chemins si c'est un dossier (interdir()=itérable)
#for f in p.rglob("*.png"): print(f.name) ; Rechercher les .png dans les dossiers et sous dossiers.
#p.parent / (p.stem + "-lowres" + p.suffix)

"""Trier les fichiers en fonctions de l'extension
form pathlib import Path

dirs = {".png": "Image",
        ".jpeg": "Image",
        "jpg" : "Image",
        ".gif" : "Image",
        ".mp4" : "Video"}

tri_dir = Path.home() / "Tri"
files = [f for f in tri_dir.iterdir() if f.is_file()]
for f in files : 
    output_dir = tri_dir / dirs.get(f.suffix, "Autres")
    output_dir.mkdir(exist_ok=True)
    f.rename(output_dir / f.name) : deplacer vers le dossier correspondant

"""
"""
 import os

SOURCE_FILE = os.path.realpath(__file__)
SOURCE_DIR = os.path.dirname(SOURCE_FILE)
ROOT_DIR = os.path.dirname(SOURCE_DIR) 
DATA_DIR = os.path.join(SOURCE_DIR, "DATA") 

from pathlib impor Path

SOURCE_FILE = Path(__file__).resolve()
SOURCE_DIR = SOURCE_FILE.parent
ROOT_DIR = SOURCE_DIR.parent 
DATA_DIR = SOURCE_DIR / "DATA" 

"""
"""
Gestion d'erreur
LBYL : Look Before You Leap : Regarde avant de sauter
EAFP : it's Easier to Ask for Forgiveness than Permission : Il est plus facile de demander pardon que de demanader la permission

a = 5
b = 10

try :
    resultat = a/b
except ZeroDivisionError:
    print("Division par zéro impossible")
except TypeError:
    print("La variable b n'est pas du bon type")
except NameError as e:
    print("Erreur : ", e)
else: # finally : il sera toujours exéctué peu importe l'erreur
    print(resultat) 
"""
"""Les fonctions
Fonctions sans valeur retour : print; ajouter utilisateur à la base de donnée
Fonctions avec valeur retour : type; récupérer l'email d'un utilisateur

def nom_de_la fonction():
    print("Je suis une fonction")
    return : arrête la fonction. On plus exécuté ce qui viendra après.


def affiche(message): #message = parametre / affoche(message = "message par défaut")
    print(message)

affiche("Bonjour") # Bonjour = argument / affiche()

""" On peut envoyer un nombre d'arg inférieur au nombre de parametre.
def add(a=1, b=2, c=6):
    return a + b + c
 
add(3, 5)
"""
"""
def test():
    affiche_bonjour()
    
def affiche_bonjour():
    print("Bonjour")

test() #Python va lire tout ce qui est en haut sans jamais le compiler 
"""
print(globals())/print(locals()) # Python regarde d'abord en local puis va en global
"""
L'ordre des paramètres dans une fonction a son importance : vous ne pouvez pas mettre un paramètre sans valeur par défaut après un paramètre qui en a une.

"""Annotation de type
def add(a: int = 0, b:int = 5) -> int : 
    return a + b

add(2, 5)

def add(a: list[int]) -> list[int] : 
    return [1, 2, 3]

add(2, 5)

""" Verificateur de code (mypy)
python3.12 -m pip install mypy

python -m mypy test.py #Commande à taper. S'il y a une erreur, il nous le dit.
test.py:4: error: Argument 1 to "add" has incompatible type "str"; expected "int"  [arg-type]
Found 1 error in 1 file (checked 1 source file)

"""Les Modules
def addition(a, b) :
    return a + b

if __name__ == "__main__ :
    print(addition(4, 5))

import sys
from pprint import pprint

pprint(sys.path) # Pour lister les dossier dans lesquels je peux crer mes Modules
cd C:\\Users\\sisso\\AppData\\Roaming\\Python\\Python312\\site-packages # pour m'y rendre
touch mon_module.py # pour le creer dans le dossier
code mon_module # Pour l'ouvrir directement dans VSCode
sys.path.append("le lien vers un autre module qui se trouve dans un autre dossier") #Si je veux appeler le module dans mon présent module
import module_test # j'import ce nouveau module dans mon premier module

import importlib
importlib.reloard(utils) # Pour actualiser une module
"""

"""Package : un dossier qui contient un ou plusieurs Modules
import utils.users # pour importer le modules users
fron utils import users : Pour importer le modules users du package utils
__init__.py : permet qu'un dossier soit reconnu comme un package. Avec les version ancienne (<3) il fallait le mettre dans le dossier.
            On passe par __init__ pour importer les différents modules

""" Documentation string = Docstring
Docstring de type Google

Args :
    param1 : un premier parametre
    param2 : un autre parametre

returns :
    Description de ce qui est retourné
"""
 """Description de la fonction

    Args:
        nom (str): Le nom de l'utilisateur
        age (int): L'âge de l'utilisateur
    Returns :
        list : Liste de nombres
"""

"""Le module logging
import logging

logging.basicConfig(level = logging.DEBUG, # Permet de spécifier le niveau à partir duquel je souhaite afficher
                    filename = "C:\Users\sisso\Documents\Exo-python\Mes_Modules\app.log"
                    filemode = "w"
                    format= '%(asctime)s - %(levelname)s - %(message)s')

logging.debug("La fonction a bien été exécutée")
logging.info("Message d'info générale")
logging.warning("Attention ! ")
logging.error("Un erreur est arrivée")
logging.critical("Erreur critique")
"""

"""pip : toujours lancer VSCode ou Git Bash en tant que Admin avant de faire une installation avec pip
pip3.12 # pour lancer pip
py -3.9 -m pip install requests # Autre de lancer pip 
pip install nom_du_module
pip uninstall nom_du_module
which python #pour avoir la version

"""Faker : package pour générer des données aléatoire
from faker import Faker

fake = Faker()
#faker = Faker(locale="fr_FR")

print(fake.name())
print(fake.address())
print(fake.text())

for _ in range(10):
    print(fake.unique.random_int())
    print(fake.unique.firs_name())
#Les providers
    print(fake.job())
    print(fake.file_path(depth = 5, category = 'video'))
    print(fake.credit_card_number(), fake.credit_card_expire(), fake.credit_card_security_code())
    print(fake.rgb_color())
    print(fake.hex_color())
    print(fake.numerify(text = "%%%-%-%%%%-%%%%-%%%-##")) # %= 1-9; # = 0-9
    print(fake.bothify(text = "Product number : ????-####")) # ?= a-z ; # = 0-9

"""Env virtuel (venv)
python -m venv env # Pour créer un envi virtuel
#Pour activer l'Env
cd Script
source activate

#Pour desactiver l'Env
deactivate

#Pour savoir si je suis en virtuel
which python
/c/Users/sisso/Documents/Exo-python/Environnement/env/Scripts/python
pip list


